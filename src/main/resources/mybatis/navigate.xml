<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 

<mapper namespace="navigate">

    <select id="navigate" resultType="java.util.LinkedHashMap" >
        select nhdplus_navigation.navigate_cached(
               pnavigationtype           := <choose><when test="navigationMode != null">#{navigationMode,jdbcType=VARCHAR}</when><otherwise>null</otherwise></choose>
              ,pstartcomid               := <choose><when test="comid != null">#{comid,jdbcType=NUMERIC}</when><otherwise>null</otherwise></choose>
              ,pstartpermanentidentifier := null
              ,pstartreachcode           := null
              ,pstartmeasure             := null
              ,pstopcomid                := <choose><when test="stopComid != null">#{stopComid,jdbcType=NUMERIC}</when><otherwise>null</otherwise></choose>
              ,pstoppermanentidentifier  := null
              ,pstopreachcode            := null
              ,pstopmeasure              := null
              ,pmaxdistancekm            := <choose><when test="distance != null">#{distance,jdbcType=NUMERIC}</when><otherwise>null</otherwise></choose>
              ,pmaxflowtimehour          := null
              ,pdebug                    := 'FALSE'
              ,paddflowlineattributes    := 'FALSE'
              ,paddflowlinegeometry      := 'FALSE'
              );
    </select>

    <select id="getCache" resultType="String">
        select min(session_id) session_id
          from nhdplus_navigation.navigation_cache_status
         where return_code = 0 and
               start_comid = #{comid} and
               navigation_mode = #{navigationMode}
        <choose>
            <when test="null != distance">
                and max_distance = #{distance}
            </when>
            <otherwise>
                and max_distance is null
            </otherwise>
        </choose>
        <choose>
            <when test="null != stopComid">
                and stop_comid = #{stopComid}
            </when>
            <otherwise>
                and stop_comid is null
            </otherwise>
        </choose>
    </select>

    <sql id="split">
        <choose>
            <when test="navigationMode == 'DD' or navigationMode == 'DM'">
                case when #{measure,jdbcType=NUMERIC} is not NULL and (#{trimTolerance,jdbcType=NUMERIC} is NULL
                    or 100 - #{measure,jdbcType=NUMERIC} >= #{trimTolerance,jdbcType=NUMERIC})
                then
                    st_asgeojson(st_linesubstring(nhdflowline_np21.shape, <include refid="navigate.scaledMeasure"/>, 1), 9, 0)
            </when>
            <when test="navigationMode == 'UT' or navigationMode == 'UM'">
                case when #{measure,jdbcType=NUMERIC} is not NULL and (#{trimTolerance,jdbcType=NUMERIC} is NULL
                    or #{measure,jdbcType=NUMERIC} >= #{trimTolerance,jdbcType=NUMERIC})
                then
                    st_asgeojson(st_linesubstring(nhdflowline_np21.shape, 0, <include refid="navigate.scaledMeasure"/>), 9, 0)
            </when>
        </choose>
        else
            st_asgeojson(nhdflowline_np21.shape, 9, 0)
        end
    </sql>

    <sql id="scaledMeasure">
        (1 - ((#{measure,jdbcType=NUMERIC} - nhdflowline_np21.fmeasure)/(nhdflowline_np21.tmeasure - nhdflowline_np21.fmeasure)))
    </sql>

    <sql id="core">
        <choose>
            <when test="navigationMode == 'DM'">
                <include refid="navigate.DM"/>
            </when>
            <when test="navigationMode == 'DD'">
                <include refid="navigate.DD"/>
            </when>
            <when test="navigationMode == 'UM'">
                <include refid="navigate.UM"/>
            </when>
            <when test="navigationMode == 'UT'">
                <include refid="navigate.UT"/>
            </when>
        </choose>
    </sql>

    <sql id="DM">
        with
            recursive nav(comid, terminalpathid, dnhydroseq, fcode, stoplength)
                as (select comid, terminalpathid, dnhydroseq, fcode,
                           pathlength + lengthkm <if test="null != distance">- #{distance}</if> stoplength
                      from nhdplus.plusflowlinevaa_np21
                     where comid = #{comid,jdbcType=NUMERIC}
                    union
                    select x.comid, x.terminalpathid, x.dnhydroseq, x.fcode, nav.stoplength
                      from nhdplus.plusflowlinevaa_np21 x,
                           nav
                     where x.hydroseq = nav.dnhydroseq and
                           x.terminalpathid = nav.terminalpathid and
                           x.fcode != ${coastal_fcode}
                           <if test="null != distance">
                               and x.pathlength + x.lengthkm >= nav.stoplength
                           </if>
                   ),
            navigation_results
                as (select comid
                      from nav
                   )
    </sql>

    <sql id="DD">
        with
            recursive nav(comid, dnhydroseq, dnminorhyd, fcode, stoplength, terminalflag)
                as (select comid, dnhydroseq, dnminorhyd, fcode,
                           pathlength + lengthkm <if test="null != distance">- #{distance}</if> stoplength,
                           terminalflag
                      from nhdplus.plusflowlinevaa_np21
                     where comid = #{comid,jdbcType=NUMERIC}
                    union
                    select x.comid, x.dnhydroseq, x.dnminorhyd, x.fcode, nav.stoplength, x.terminalflag
                      from nhdplus.plusflowlinevaa_np21 x,
                           nav
                     where (x.hydroseq = nav.dnhydroseq or
                            (nav.dnminorhyd != 0 and
                             x.hydroseq = nav.dnminorhyd)) and
                           x.fcode != ${coastal_fcode} and
                           nav.terminalflag != 1
                           <if test="null != distance">
                               and x.pathlength + x.lengthkm >= nav.stoplength
                           </if>
                   ),
            navigation_results
                as (select comid
                      from nav
                   )
    </sql>

    <sql id="UM">
        with
            recursive nav(comid, levelpathid, uphydroseq, fcode, stoplength)
                as (select comid, levelpathid, uphydroseq, fcode,
                           pathlength + 0 <if test="null != distance">+ #{distance}</if> stoplength
                      from nhdplus.plusflowlinevaa_np21
                     where comid = #{comid,jdbcType=NUMERIC}
                    union all
                    select x.comid, x.levelpathid, x.uphydroseq, x.fcode, nav.stoplength
                      from nhdplus.plusflowlinevaa_np21 x,
                           nav
                     where x.hydroseq = nav.uphydroseq and
                           x.levelpathid = nav.levelpathid and
                           x.fcode != ${coastal_fcode}
                           <if test="null != distance">
                               and x.pathlength &lt;= nav.stoplength
                           </if>
                   ),
            navigation_results
                as (select comid
                      from nav
                   )
    </sql>

    <sql id="UT">
        with
            recursive navigation_results(comid, hydroseq, startflag, fcode, stoplength)
                as (select comid, hydroseq, startflag, fcode,
                           pathlength + 0 <if test="null != distance">+ #{distance}</if> stoplength
                      from nhdplus.plusflowlinevaa_np21
                     where comid = #{comid,jdbcType=NUMERIC}
                    union
                    select x.comid, x.hydroseq, x.startflag, x.fcode, navigation_results.stoplength
                      from nhdplus.plusflowlinevaa_np21 x,
                           navigation_results
                     where navigation_results.startflag != 1 and
                           (x.dnhydroseq = navigation_results.hydroseq or
                            (x.dnminorhyd != 0 and
                             x.dnminorhyd = navigation_results.hydroseq)) and
                            x.fcode != ${coastal_fcode}
                           <if test="null != distance">
                               and x.pathlength &lt;= navigation_results.stoplength
                           </if>
                   )
    </sql>

    <select id="features" resultMap="lookup.FeatureResult" fetchSize="50">
        <include refid="navigate.core"/>
        select <include refid="lookup.newFeatureProperties"/>
        from navigation_results
            join nldi_data.feature
                on navigation_results.comid = feature.comid
            join nldi_data.crawler_source
                on feature.crawler_source_id = crawler_source.crawler_source_id
            left join nldi_data.mainstem_lookup as mainstem
                on feature.comid = mainstem.nhdpv2_comid
            where lower(source_suffix) = #{dataSource}
    </select>

</mapper>
