<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="lookup">

    <sql id="featureProperties">
        crawler_source.feature_type,
        crawler_source.source_suffix source,
        crawler_source.source_name,
        feature.identifier,
        feature.name,
        feature.uri,
        feature.comid,
        feature.reachcode,
        feature.measure,
        case when feature.shape is null
            then st_asgeojson(feature.location, 9, 0)
            else st_asgeojson(feature.shape, 9, 0)
        end shape
    </sql>

    <select id="featureSource" resultType="java.util.LinkedHashMap">
        select *
        from nldi_data.crawler_source
        where lower(source_suffix) = lower(#{featureSource})
    </select>

    <sql id="featureFromWhere">
         from nldi_data.feature
              join nldi_data.crawler_source
                on feature.crawler_source_id = crawler_source.crawler_source_id
        where identifier = #{featureID} and
              lower(source_suffix) = lower(#{featureSource})
    </sql>

    <sql id="comidFromWhere">
         from nhdplus.nhdflowline_np21
        where nhdplus_comid = #{featureID}::integer
    </sql>

    <select id="feature" resultType="java.util.LinkedHashMap">
        <choose>
            <when test="featureSource == 'comid'">
                select distinct nhdplus_comid comid
                  <include refid="lookup.comidFromWhere"/>
            </when>
            <otherwise>
                select distinct comid <if test="getMeasure == true">, measure</if>
                  <include refid="lookup.featureFromWhere"/>
            </otherwise>
        </choose>
    </select>

    <select id="featureComid" resultType="Integer">
        select comid from nldi_data.feature
            join nldi_data.crawler_source
                on feature.crawler_source_id = crawler_source.crawler_source_id
            where identifier = #{featureID} and
                lower(source_suffix) = lower(#{featureSource}) and
                comid is not null
            limit 1
    </select>

    <select id="comidExists" resultType="Boolean" parameterType="Integer">
        select count(nhdplus_comid) != 0
            from nhdplus.nhdflowline_np21
            where nhdplus_comid = #{comid}
    </select>

    <select id="featureExists" resultType="Boolean">
        select count(*) != 0
        <include refid="lookup.featureFromWhere"/>
    </select>

    <select id="reachCode" resultType="String">
        select distinct reachcode
        from nhdplus.nhdflowline_np21
        where nhdplus_comid = #{comid}::integer
    </select>

    <select id="measureEstimate" resultType="java.util.LinkedHashMap">
        select distinct
            fmeasure + (1 - st_linelocatepoint(nhdplus.nhdflowline_np21.shape,
                <choose>
                    <when test="lon != null and lat != null">
                        st_geomfromtext('POINT(${lon} ${lat})', 4269)
                    </when>
                    <otherwise>
                        location
                    </otherwise>
                </choose>
                )) * (tmeasure - fmeasure) measure
        from
            <choose>
                <when test="comid == null">
                    nldi_data.feature
                    join nldi_data.crawler_source
                        on feature.crawler_source_id = crawler_source.crawler_source_id
                    join nhdplus.nhdflowline_np21
                        on nhdflowline_np21.nhdplus_comid = feature.comid
                </when>
                <otherwise>
                    nhdplus.nhdflowline_np21
                </otherwise>
            </choose>
        where
            <choose>
                <when test="comid == null">
                    identifier = #{featureID}
                    and lower(source_suffix) = lower(#{featureSource})
                </when>
                <otherwise>
                    nhdplus_comid = #{comid}
                </otherwise>
            </choose>
    </select>

    <select id="dataSources" resultMap="DataSourceResult">
        select source_suffix source,
               source_name "sourceName",
               #{rootUrl,jdbcType=VARCHAR} || '/' || lower(source_suffix) features
        from nldi_data.crawler_source
        order by lower(source_suffix)
    </select>

    <resultMap id="DataSourceResult" type="gov.usgs.owi.nldi.model.DataSource">
        <result property="source" column="source"/>
        <result property="name" column="sourceName"/>
        <result property="uri" column="features"/>
    </resultMap>

    <select id="comidLatLon" resultType="integer">
        select featureid
          from nhdplus.catchmentsp
            where st_intersects(nhdplus.catchmentsp.the_geom,
              st_geomfromtext('POINT(${lon} ${lat})', 4269));
    </select>

    <select id="distanceFromFlowline" resultType="float">
        select st_distance(x.location, x.shape, false)
        from (
            select flow.shape, feat.location
            from nhdplus.nhdflowline_np21 flow
                inner join nldi_data.feature feat
                    on feat.comid = flow.nhdplus_comid
                        and feat.identifier = #{featureID}
                inner join nldi_data.crawler_source crawler
                    on crawler.source_suffix = #{featureSource}
                        and feat.crawler_source_id = crawler.crawler_source_id
        ) as x;
    </select>

    <select id="closestPointOnFlowline" resultType="java.util.LinkedHashMap">
        select st_y(result.point::geometry) as lat, st_x(result.point::geometry) as lon
        from (
            select st_closestpoint(x.shape, x.location) as point
            from (
                select flow.shape, feat.location
                from nhdplus.nhdflowline_np21 flow
                    inner join nldi_data.feature feat
                        on feat.comid = flow.nhdplus_comid
                        and feat.identifier = #{featureID}
                    inner join nldi_data.crawler_source crawler
                        on crawler.source_suffix = #{featureSource}
                        and feat.crawler_source_id = crawler.crawler_source_id
            ) as x
        ) as result;
    </select>

    <select id="featureLocation" resultType="java.util.LinkedHashMap">
        select st_y(result.location::geometry) as lat,
               st_x(result.location::geometry) as lon
        from (
            select distinct feat.location
                from nldi_data.feature feat
                inner join nldi_data.crawler_source crawler
                    on crawler.source_suffix = #{featureSource}
                    and feat.crawler_source_id = crawler.crawler_source_id
                where feat.identifier = #{featureID}
        ) as result;
    </select>

    <select id="featureIsPoint" resultType="Boolean">
        select case when feat.shape is not null
            then geometrytype(feat.shape) = 'POINT'
            else geometrytype(feat.location) = 'POINT'
            end
        from nldi_data.feature feat
                inner join nldi_data.crawler_source crawler
                    on crawler.source_suffix = #{featureSource}
        and feat.crawler_source_id = crawler.crawler_source_id
        where feat.identifier = #{featureID}
    </select>

    <select id="pointOnFlowline" resultType="java.util.LinkedHashMap">
        select st_y(st_lineinterpolatepoint(flow.shape, (1 - ((feat.measure - flow.fmeasure)/(flow.tmeasure - flow.fmeasure))))) as lat,
               st_x(st_lineinterpolatepoint(flow.shape, (1 - ((feat.measure - flow.fmeasure)/(flow.tmeasure - flow.fmeasure))))) as lon
        from nhdplus.nhdflowline_np21 flow
                 inner join nldi_data.feature feat
                            on feat.comid = flow.nhdplus_comid
                                and feat.identifier = #{featureID}
                 inner join nldi_data.crawler_source crawler
                            on crawler.source_suffix = #{featureSource}
                                and feat.crawler_source_id = crawler.crawler_source_id
    </select>

    <select id="fancyComid" resultMap="ComidResult" fetchSize="50">
        select
            nhdflowline_np21.nhdplus_comid identifier,
            nhdflowline_np21.nhdplus_comid comid,
            st_asgeojson(nhdflowline_np21.shape, 9, 0) shape
        from nhdplus.nhdflowline_np21
        where nhdplus_comid = #{comid}::integer
    </select>

    <!--
        This uses constructor mapping so the order needs to match the Comid
        constructor order.
    -->
    <resultMap id="ComidResult" type="gov.usgs.owi.nldi.model.Comid">
        <result property="identifier" column="identifier"/>
        <result property="comid" column="comid"/>
        <result property="geometry" column="shape" javaType="mil.nga.sf.geojson.Geometry"/>
    </resultMap>

    <sql id="newFeatureProperties">
        crawler_source.feature_type,
        crawler_source.source_suffix source,
        crawler_source.source_name,
        feature.identifier,
        feature.name,
        feature.uri,
        feature.comid,
        feature.reachcode,
        feature.measure,
        mainstem.uri mainstem_uri,
        case when feature.shape is null
            then st_asgeojson(feature.location, 9, 0)
            else st_asgeojson(feature.shape, 9, 0)
        end shape,
        case when feature.shape is null
            then st_astext(feature.location)
            else st_astext(feature.shape)
        end wkt
    </sql>

    <select id="fancyFeature" resultMap="FeatureResult" fetchSize="50">
        select <include refid="lookup.newFeatureProperties"/>
        from nldi_data.feature
            join nldi_data.crawler_source
                on feature.crawler_source_id = crawler_source.crawler_source_id
            left join nldi_data.mainstem_lookup as mainstem
                on feature.comid = mainstem.nhdpv2_comid
        where identifier = #{featureID} and
            lower(source_suffix) = lower(#{featureSource})
    </select>

    <!--
        This uses constructor mapping so the order needs to match the Feature
        constructor order.
    -->
    <resultMap id="FeatureResult" type="gov.usgs.owi.nldi.model.Feature">
        <result property="type" column="feature_type"/>
        <result property="source" column="source"/>
        <result property="sourceName" column="source_name"/>
        <result property="identifier" column="identifier"/>
        <result property="name" column="name"/>
        <result property="uri" column="uri"/>
        <result property="comid" column="comid"/>
        <result property="reachcode" column="reachcode"/>
        <result property="measure" column="measure"/>
        <result property="mainstemUri" column="mainstem_uri"/>
        <result property="geometry" column="shape" javaType="mil.nga.sf.geojson.Geometry"/>
        <result property="wellKnownText" column="wkt"/>
    </resultMap>
</mapper>
